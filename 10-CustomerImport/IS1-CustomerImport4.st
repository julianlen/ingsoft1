Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'JulianLen 7/1/2018 21:45'!setUp	system := Environment current createERPSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:52'!tearDown	system commit.	system shutdown! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'JulianLen 6/30/2018 20:10'!invalidDataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'JulianLen 6/30/2018 20:11'!invalidAddressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/4/2016 09:27'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream using: system) import! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'JulianLen 6/29/2018 20:24'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutPartyErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'JulianLen 6/30/2018 20:10'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self invalidDataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'JulianLen 6/28/2018 19:28'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'JulianLen 6/30/2018 20:11'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self invalidAddressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/3/2016 09:21'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:21'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:10'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !Object subclass: #ERPSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 16:40'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber
	self subclassResponsibility! !!ERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 16:39'!customersIsEmpty
	self subclassResponsibility! !!ERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 16:40'!allCustomers
	self subclassResponsibility! !!ERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 16:40'!add: aCustomer
	self subclassResponsibility! !!ERPSystem methodsFor: 'transaction' stamp: 'JulianLen 7/1/2018 16:40'!commit
	self subclassResponsibility! !!ERPSystem methodsFor: 'transaction' stamp: 'JulianLen 7/1/2018 16:40'!beginTransaction
	self subclassResponsibility! !!ERPSystem methodsFor: 'system live cycle' stamp: 'JulianLen 7/1/2018 16:40'!start
	self subclassResponsibility! !!ERPSystem methodsFor: 'system live cycle' stamp: 'JulianLen 7/1/2018 16:40'!shutdown
	self subclassResponsibility! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'system creation' stamp: 'JulianLen 7/1/2018 21:45'!createERPSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'JulianLen 7/1/2018 21:46'!createERPSystem		^TransientERPSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Object subclass: #Importer	instanceVariableNames: 'line readStream record system newParty'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Importer methodsFor: 'importing - private' stamp: 'JulianLen 7/1/2018 22:56'!importCustomer
	self subclassResponsibility! !!Importer methodsFor: 'importing - private' stamp: 'JulianLen 6/28/2018 20:45'!importRecord
	self subclassResponsibility! !!Importer methodsFor: 'importing - private' stamp: 'JulianLen 6/29/2018 19:40'!import	[ self canImportNextLine ]		whileTrue: [ self convertLineToRecord.			self importRecord.			 ]! !!Importer methodsFor: 'importing - private' stamp: 'JulianLen 6/29/2018 13:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!Importer methodsFor: 'importing - private' stamp: 'JulianLen 6/28/2018 20:52'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!Importer methodsFor: 'importing - private' stamp: 'JulianLen 6/29/2018 13:52'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!Importer methodsFor: 'importing - private - address' stamp: 'JulianLen 6/28/2018 20:52'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!Importer methodsFor: 'importing - private - address' stamp: 'JulianLen 6/29/2018 20:25'!importAddress	| newAddress |	self assertThereIsPartyForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newParty addAddress: newAddress! !!Importer methodsFor: 'importing - private - address' stamp: 'JulianLen 6/29/2018 20:26'!assertThereIsPartyForAddress	newParty isNil ifTrue: [ self signalAddressWithoutPartyError ].	! !!Importer methodsFor: 'importing - private - address' stamp: 'JulianLen 6/29/2018 13:52'!isAddressRecord	^ record first = 'A'! !!Importer methodsFor: 'inspecting' stamp: 'JulianLen 7/1/2018 22:53'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].! !!Importer methodsFor: 'error signal' stamp: 'JulianLen 6/29/2018 14:01'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!Importer methodsFor: 'error signal' stamp: 'JulianLen 7/1/2018 22:53'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!Importer methodsFor: 'error signal' stamp: 'JulianLen 6/29/2018 19:55'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!Importer methodsFor: 'error signal' stamp: 'JulianLen 6/29/2018 20:25'!signalAddressWithoutPartyError	self error: self class addressWithoutPartyErrorDescription.! !!Importer methodsFor: 'initialization' stamp: 'JulianLen 6/28/2018 20:48'!initializeOn: aReadStream using: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Importer class	instanceVariableNames: ''!!Importer class methodsFor: 'instance creation' stamp: 'JulianLen 6/28/2018 20:45'!from: aReadStream using: aCustomerSystem
	self subclassResponsibility! !!Importer class methodsFor: 'error descriptions' stamp: 'JulianLen 6/29/2018 19:55'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!Importer class methodsFor: 'error descriptions' stamp: 'JulianLen 6/29/2018 20:24'!addressWithoutPartyErrorDescription		^'There is no Party for the imported address'! !!Importer class methodsFor: 'error descriptions' stamp: 'JulianLen 6/29/2018 14:01'!invalidRecordTypeErrorDescription		^'Invalid record type'! !Importer subclass: #CustomerImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'JulianLen 6/29/2018 20:20'!importCustomer	self assertValidCustomerRecordSize.	newParty := Customer new.	newParty firstName: record second.	newParty lastName: record third.	newParty identificationType: record fourth.	newParty identificationNumber: record fifth.	system add: newParty! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error descriptions' stamp: 'JulianLen 6/29/2018 20:35'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/4/2016 09:27'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'JulianLen 7/1/2018 21:45'!createERPSystem		^PersistentERPSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'JulianLen 7/1/2018 21:52'!isCurrent		^false! !!IntegrationEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!not	self shouldBeImplemented.! !Object subclass: #Party	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Party methodsFor: 'adding' stamp: 'JulianLen 7/1/2018 23:03'!addressAt: aStreetName ifNone: noneClosure 	self subclassResponsibility ! !!Party methodsFor: 'adding' stamp: 'JulianLen 7/1/2018 23:04'!addressesIsEmpty	self subclassResponsibility ! !!Party methodsFor: 'adding' stamp: 'JulianLen 7/1/2018 23:03'!addAddress: anAddress 	self subclassResponsibility ! !Party subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'initialization' stamp: 'JulianLen 7/1/2018 23:00'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'JulianLen 7/1/2018 23:00'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'JulianLen 7/1/2018 23:00'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'addresses' stamp: 'JulianLen 7/1/2018 23:00'!addresses	^ addresses! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 11/4/2016 09:42'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !ERPSystem subclass: #PersistentERPSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentERPSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/3/2016 08:54'!initialize		super initialize.	self initializeSession. ! !!PersistentERPSystem methodsFor: 'initialization' stamp: 'JulianLen 7/1/2018 20:05'!supplierMapping	""	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))				.				! !!PersistentERPSystem methodsFor: 'initialization' stamp: 'JulianLen 7/1/2018 20:03'!initializeSession	session := DataBaseSession		for:			(Array				with: self addressMapping				with: self customerMapping				with: self supplierMapping)! !!PersistentERPSystem methodsFor: 'initialization' stamp: 'JulianLen 7/1/2018 20:06'!suppliersIsEmpty	^self allSuppliers isEmpty! !!PersistentERPSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:18'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	customers size = 1		ifFalse: [ self error: 'No o more that one customer found' ].	^ customers anyOne! !!PersistentERPSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/3/2016 09:11'!customersIsEmpty	^ self allCustomers isEmpty! !!PersistentERPSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:18'!allCustomers	^ session selectAllOfType: Customer! !!PersistentERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 20:03'!add: aParty	session persist: aParty! !!PersistentERPSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!commit	session commit! !!PersistentERPSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!beginTransaction	session beginTransaction! !!PersistentERPSystem methodsFor: 'system live cycle' stamp: 'JulianLen 7/1/2018 20:05'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber	| suppliers |	suppliers := session		select: [ :aSupplier | 			aSupplier hasIdentificationType: anIdentificationType andIdentificationNumber: anIdentificationNumber]		ofType: Supplier.	suppliers size = 1		ifFalse: [ self error: 'No or more that one customer found' ].	^ suppliers anyOne! !!PersistentERPSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	session start! !!PersistentERPSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	session shutdown! !!PersistentERPSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentERPSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentERPSystem methodsFor: 'inspecting' stamp: 'JulianLen 7/1/2018 20:05'!numberOfSuppliers	^self allSuppliers size! !!PersistentERPSystem methodsFor: 'inspecting' stamp: 'JulianLen 7/1/2018 20:07'!allSuppliers	^ session selectAllOfType: Supplier! !Party subclass: #Supplier	instanceVariableNames: 'id name identificationType identificationNumber addresses customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'inspecting' stamp: 'JulianLen 6/29/2018 13:33'!hasIdentificationNumber: anIdentificationNumber	^identificationNumber = anIdentificationNumber ! !!Supplier methodsFor: 'inspecting' stamp: 'JulianLen 6/30/2018 18:54'!hasNumberOfCustomers: aNumberOfCustomers 	^customers size = aNumberOfCustomers ! !!Supplier methodsFor: 'inspecting' stamp: 'JulianLen 7/1/2018 21:53'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNone: aBlockClosure	^customers detect: [ :customer | customer isIdentifiedAs: anIdentificationType numbered: anIdentificationNumber] ifNone: aBlockClosure ! !!Supplier methodsFor: 'inspecting' stamp: 'JulianLen 6/28/2018 20:28'!hasIdentificationType: anIdentificationType andIdentificationNumber: anIdentificationNumber	^(identificationNumber = anIdentificationNumber) and: [ identificationType = anIdentificationType  ]! !!Supplier methodsFor: 'inspecting' stamp: 'JulianLen 7/1/2018 23:00'!addressesIsEmpty	^addresses isEmpty! !!Supplier methodsFor: 'inspecting' stamp: 'JulianLen 6/29/2018 13:35'!hasNumberOfAddresses: aNumberOfAddresses	^addresses size = aNumberOfAddresses ! !!Supplier methodsFor: 'inspecting' stamp: 'JulianLen 6/29/2018 13:32'!hasIdentificationType: anIdentificationType	^identificationType = anIdentificationType ! !!Supplier methodsFor: 'inspecting' stamp: 'JulianLen 6/29/2018 13:36'!hasName: aName	^name = aName! !!Supplier methodsFor: 'addresses' stamp: 'JulianLen 7/1/2018 23:00'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'addresses' stamp: 'JulianLen 7/1/2018 23:00'!addresses	^ addresses! !!Supplier methodsFor: 'initialization' stamp: 'JulianLen 6/30/2018 18:19'!initialize	super initialize.	addresses := OrderedCollection new.	customers := OrderedCollection new.! !!Supplier methodsFor: 'initialization' stamp: 'JulianLen 6/30/2018 18:48'!addCustomer: aCustomer	customers add: aCustomer! !!Supplier methodsFor: 'initialization' stamp: 'JulianLen 6/28/2018 20:14'!withName: aName withIdentificationType: anIdType withIdentificationNumber: anIdNumber 	name := aName.	identificationType :=  anIdType.	identificationNumber := anIdNumber ! !!Supplier methodsFor: 'initialization' stamp: 'JulianLen 7/1/2018 23:00'!addAddress: anAddress 	addresses add: anAddress ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Supplier class	instanceVariableNames: ''!!Supplier class methodsFor: 'creation' stamp: 'JulianLen 6/28/2018 19:50'!withName: aName withIdentificationType: aIdType withIdentificationNumber: aIdNumber 	^self new withName: aName withIdentificationType: aIdType withIdentificationNumber: aIdNumber ! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 7/1/2018 20:33'!invalidExistingCustomerRecordStartingWithMoreThanECTestData	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444ECC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 7/1/2018 21:42'!invalidImportedSupplierRecordWithCustomersFieldSizeDifferentOfThree	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444EC,DA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/30/2018 20:11'!validSupplierRecordWithValidAddress	^ReadStream on: 'S,Supplier1,D,123A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/30/2018 20:12'!invalidSupplierRecordWithLessThanFourFieldsTestData	^ReadStream on: 'S,Supplier1,D'.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/30/2018 20:11'!invalidImportedSupplierRecordWithInvalidNewCustomerRecord	^ ReadStream on: 'S,Supplier1,D,123NNC,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 7/1/2018 16:28'!validImportedSupplierRecordWithExistingCustomers	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/29/2018 00:26'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream using: system) import! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/30/2018 20:13'!validImportedSupplierRecordWithCustomers	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/29/2018 14:14'!assert: supplier hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := supplier addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/30/2018 20:12'!invalidSupplierRecordStartingWithMoreThanOneSTestData	^ ReadStream on: 'SS,Supplier1,D,123'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 7/1/2018 16:27'!validCustomerTestData	^ ReadStream on:'C,Nicolas,Lucas,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/30/2018 20:10'!invalidDataWithEmptyLine		^ ReadStream on: 'S,Supplier1,D,123A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/30/2018 20:13'!invalidImportedSupplierRecordWithCustomersFieldSizeDifferentOf5	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,DA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'JulianLen 6/30/2018 20:11'!invalidAddressRecordStartingWithMoreThanOneATestData	^ReadStream on: 'S,Supplier1,D,123AA,San Martin,3322,Olivos,1636'.! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:10'!test08CanNotImportAddressWithoutSupplier	self		should: [ self importSuppliersFrom: self invalidAddressWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter addressWithoutPartyErrorDescription.			system suppliersIsEmpty  ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 7/1/2018 21:52'!setUp	system := Environment current createERPSystem.	system start.	system beginTransaction .	! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:12'!test04CanNotImportAddressRecordWithDifferentOfSixFields	self		should: [ self				importSuppliersFrom: self invalidAddressRecordDifferentOfSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidAddressRecordErrorDescription.			self assertAddressesIsEmpty ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:12'!test05ShouldNotImportSupplierRecordsStartingWithMoreThanS	self		should: [ self				importSuppliersFrom: self invalidSupplierRecordStartingWithMoreThanOneSTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: system suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:07'!test01ImportSuppliersWithoutAddressAndCustomerEither	self importSuppliersFrom: self validImportedSupplierRecord.	self assertImportedSupplierSizeIsCorrect.	self assertSupplier1WasImportedWithoutAddressesAndCustomerEitherCorrectly! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:06'!assertSupplier1WasImportedCorrectlyWithoutCustomers	self		assert: self alwaysImportedSupplier		hasName: 'Supplier1'		identifiedAs: 'D'		withNumber: '123'		andNumberOfAddresses: 2		andNumberOfCustomers: 0! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:11'!test03ImportSupplierWithAddresses	self importSuppliersFrom: self validSupplierRecordWithValidAddress.	self assertImportedSupplierSizeIsCorrect.	self assertSupplier1WasImportedCorrectlyWithoutCustomers.	self assertAddressesAreImportedCorrectly! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/29/2018 21:29'!validImportedSupplierRecord	^ ReadStream on: 'S,Supplier1,D,123'! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 22:12'!test10CanNotImportNewCustomersWithOtherRecordTypeThanNC	self		should: [ self				importSuppliersFrom: self invalidImportedSupplierRecordWithInvalidNewCustomerRecord ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assertImportedSupplierSizeIsCorrect.			self assertAddressesIsEmpty.			self assertSupplier1WasImportedWithoutAddressesAndCustomerEitherCorrectly]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 7/1/2018 21:41'!test14CanNotImportExistingCustomersWithFieldSizeDifferentOfThree	self		should: [ self				importSuppliersFrom: self invalidImportedSupplierRecordWithCustomersFieldSizeDifferentOfThree ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerRecordErrorDescription .			self assertImportedSupplierSizeIsCorrect.			self assertAddressesIsEmpty.			self assertPepeSanchezNewCustomerWasImportedCorrectly]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:11'!test06ShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importSuppliersFrom: self invalidAddressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assertAddressesIsEmpty.			self assertSupplier1WasImportedWithoutAddressesAndCustomerEitherCorrectly			  ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 22:13'!test11CanNotImportNewCustomersWithFieldSizeDifferentOfFive	self		should: [ self				importSuppliersFrom: self invalidImportedSupplierRecordWithCustomersFieldSizeDifferentOf5 ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerRecordErrorDescription .			self assertImportedSupplierSizeIsCorrect.			self assertAddressesIsEmpty.			self assertSupplier1WasImportedWithoutAddressesAndCustomerEitherCorrectly]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 7/1/2018 20:20'!assertImportedSupplierHasTwoCustomerImported	self		assert: self alwaysImportedSupplier		hasName: 'Supplier1'		identifiedAs: 'D'		withNumber: '123'		andNumberOfAddresses: 2		andNumberOfCustomers: 2.	self assertAddressesAreImportedCorrectly! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:10'!assertPepeSanchezNewCustomerWasImportedCorrectly	self		assert: self alwaysImportedSupplier		hasCustomerNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: 'D'		withNumber: '22333444'! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 22:12'!test09CanImportNewCustomers	self		importSuppliersFrom: self validImportedSupplierRecordWithCustomers.	self assertImportedSupplierSizeIsCorrect.	self assertImportedSupplierHasNewCustomerImported.	self assertPepeSanchezNewCustomerWasImportedCorrectly! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/29/2018 21:34'!alwaysImportedSupplier	^ system supplierIdentifiedAs: 'D' numbered: '123'! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/29/2018 13:44'!tearDown	system commit.	system shutdown! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:07'!assertSupplier1WasImportedWithoutAddressesAndCustomerEitherCorrectly	|supplier|	supplier := self alwaysImportedSupplier.	self		assert: supplier		hasName: 'Supplier1'		identifiedAs: 'D'		withNumber: '123'		andNumberOfAddresses: 0		andNumberOfCustomers: 0.! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 7/1/2018 20:31'!test12CanImportExistingCustomers		(CustomerImporter from: self validCustomerTestData using: system) import.	(SupplierImporter from: self validImportedSupplierRecordWithExistingCustomers using: system) import.	self assertImportedSupplierSizeIsCorrect.	self assertImportedSupplierHasTwoCustomerImported.	self assertPepeSanchezNewCustomerWasImportedCorrectly.	self assertNicolasLucasExistingCustomerWasImportedCorrectly.	! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/29/2018 19:47'!assertImportedSupplierSizeIsCorrect	self assert: system numberOfSuppliers equals: 1! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 7/1/2018 20:31'!assertNicolasLucasExistingCustomerWasImportedCorrectly	self		assert: self alwaysImportedSupplier		hasCustomerNamed: 'Nicolas'		lastName: 'Lucas'		identfiedAs: 'D'		withNumber: '5456774'! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:12'!test02CanNotImportSupplierRecordWithDifferentOfFourFields	self		should: [ self				importSuppliersFrom: self invalidSupplierRecordWithLessThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: system suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 7/1/2018 21:40'!test13ShouldNotImportExistingCustomerRecordsStartingWithMoreThanEC	self		should: [ self importSuppliersFrom: self invalidExistingCustomerRecordStartingWithMoreThanECTestData 			]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assertImportedSupplierSizeIsCorrect.			self assertAddressesIsEmpty.			self assertPepeSanchezNewCustomerWasImportedCorrectly.]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 20:10'!test07EmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importSuppliersFrom: self invalidDataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assertAddressesIsEmpty  ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 7/1/2018 20:19'!assertImportedSupplierHasNewCustomerImported	self		assert: self alwaysImportedSupplier		hasName: 'Supplier1'		identifiedAs: 'D'		withNumber: '123'		andNumberOfAddresses: 2		andNumberOfCustomers: 1.	self assertAddressesAreImportedCorrectly! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/29/2018 21:35'!assertAddressesIsEmpty	| supplier |	supplier := self alwaysImportedSupplier.	^ self assert: supplier addressesIsEmpty! !!SupplierImportTest methodsFor: 'tests' stamp: 'JulianLen 6/30/2018 19:55'!assertAddressesAreImportedCorrectly	| supplier |	supplier := self alwaysImportedSupplier.	self		assert: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: supplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'inspecting' stamp: 'JulianLen 6/30/2018 18:53'!assert: aSupplier hasName: aName identifiedAs: anIdentificationType withNumber: anIdentificationNumber andNumberOfAddresses: aNumberOfAddresses andNumberOfCustomers: aNumberOfCustomers 		self assert: (aSupplier hasName: aName).	self assert: (aSupplier hasIdentificationType: anIdentificationType ).	self assert: (aSupplier hasIdentificationNumber: anIdentificationNumber  ).	self assert: (aSupplier hasNumberOfAddresses: aNumberOfAddresses).	self assert: (aSupplier hasNumberOfCustomers: aNumberOfCustomers).! !!SupplierImportTest methodsFor: 'test data - suppliers' stamp: 'JulianLen 6/30/2018 20:12'!invalidAddressRecordDifferentOfSixFieldsTestData	^ReadStream on: 'S,Supplier1,D,123A,San Martin,3322,Olivos,1636'.! !!SupplierImportTest methodsFor: 'test data - suppliers' stamp: 'JulianLen 6/30/2018 20:10'!invalidAddressWithoutSupplierTestData		^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JulianLen 7/1/2018 21:53'!assert: aSupplier hasCustomerNamed: firstName lastName: lastName identfiedAs: identificationType withNumber: identificationNumber 		| customer |	customer := aSupplier supplierIdentifiedAs: identificationType 	numbered: identificationNumber ifNone: [ self fail ].	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: identificationType.	self assert: customer identificationNumber equals: identificationNumber.		! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JulianLen 6/29/2018 13:48'!assert: aSupplier hasName: aName identifiedAs: anIdentificationType withNumber: anIdentificationNumber andNumberOfAddresses: aNumberOfAddresses 	self assert: (aSupplier hasName: aName).	self assert: (aSupplier hasIdentificationType: anIdentificationType ).	self assert: (aSupplier hasIdentificationNumber: anIdentificationNumber  ).	self assert: (aSupplier hasNumberOfAddresses: aNumberOfAddresses).! !Importer subclass: #SupplierImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'testing' stamp: 'JulianLen 7/1/2018 20:11'!isExistingCustomer	^record first = 'EC'! !!SupplierImporter methodsFor: 'error signal' stamp: 'JulianLen 6/29/2018 00:29'!signalInvalidSupplierRecord	self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'JulianLen 6/30/2018 20:14'!importCustomer	| newCustomer |	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	newParty addCustomer: newCustomer .! !!SupplierImporter methodsFor: 'importing-methods' stamp: 'JulianLen 7/1/2018 21:43'!importExistingCustomer	| existingCustomer |		self assertValidExistingCustomerRecordSize.	existingCustomer := system		customerIdentifiedAs: record second		numbered: record third.	newParty addCustomer: existingCustomer.! !!SupplierImporter methodsFor: 'importing' stamp: 'JulianLen 6/30/2018 16:57'!assertValidSupplierRecordSize	record size ~= 4		ifTrue: [ self signalInvalidSupplierRecord ]! !!SupplierImporter methodsFor: 'importing' stamp: 'JulianLen 6/30/2018 16:57'!importSupplier	self assertValidSupplierRecordSize.	newParty := Supplier		withName: record second		withIdentificationType: record third		withIdentificationNumber: record fourth.	system add: newParty! !!SupplierImporter methodsFor: 'importing' stamp: 'JulianLen 7/1/2018 20:10'!importRecord	self isSupplierRecord		ifTrue: [ ^ self importSupplier ].	self isAddressRecord		ifTrue: [ ^ self importAddress ].	self isNewCustomerRecord		ifTrue: [ ^ self importCustomer ].	self isExistingCustomer		ifTrue: [ ^ self importExistingCustomer ].			self signalInvalidRecordType! !!SupplierImporter methodsFor: 'inspecting' stamp: 'JulianLen 6/29/2018 19:38'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'inspecting' stamp: 'JulianLen 7/1/2018 21:43'!assertValidExistingCustomerRecordSize		record size ~= 3 ifTrue: [ self signalInvalidCustomerRecord ].! !!SupplierImporter methodsFor: 'inspecting' stamp: 'JulianLen 6/30/2018 17:41'!isNewCustomerRecord	^record first = 'NC'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'JulianLen 6/30/2018 20:15'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'creation' stamp: 'JulianLen 6/28/2018 19:37'!from: aReadStrem using: aSupplierSystem	^self new initializeOn: aReadStrem using: aSupplierSystem ! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'JulianLen 6/29/2018 00:28'!invalidSupplierRecordErrorDescription	^'Invalid supplier record'! !ERPSystem subclass: #TransientERPSystem	instanceVariableNames: 'customers suppliers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientERPSystem methodsFor: 'initialization' stamp: 'JulianLen 7/1/2018 21:47'!initialize		customers := OrderedCollection new.	suppliers := OrderedCollection new.! !!TransientERPSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	! !!TransientERPSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown		! !!TransientERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 21:49'!suppliersIsEmpty	^ suppliers isEmpty ! !!TransientERPSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!allCustomers	^ customers copy! !!TransientERPSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:40'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 21:48'!add: aParty	(aParty isKindOf: Customer) ifTrue:	[customers add: aParty].	(aParty isKindOf: Supplier) ifTrue:	[suppliers add: aParty]! !!TransientERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 21:50'!numberOfSuppliers	^suppliers size! !!TransientERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 21:50'!allSuppliers	^ suppliers copy! !!TransientERPSystem methodsFor: 'customers' stamp: 'JulianLen 7/1/2018 21:53'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber		^suppliers detect: [ :aSupplier | aSupplier hasIdentificationType: anIdentificationType andIdentificationNumber: anIdentificationNumber ]! !!TransientERPSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:40'!customersIsEmpty	^ customers isEmpty ! !!TransientERPSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!commit		! !!TransientERPSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!beginTransaction		! !Object subclass: #ClassMapping	instanceVariableNames: 'mappedClass mappings tableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:40'!map: anObject using: aDataBaseSession	| record |	self toDo: 'se puede optimizar usando array para registros y guardando definicion de tabla una vez'.	record := Dictionary new.		self mapIdOf: anObject into: record using: aDataBaseSession.	self mapEmbededOf: anObject into: record.	"agrego aca el registro y no luego de mapear el id para que lo agrege completo. Lo agrego antes de mapear las rel one to many 	porque si usuara una db de verdad habria foreign key constrain"	aDataBaseSession add: record on: self tableName.	self mapOneToManyRelationshipsOf: anObject using: aDataBaseSession! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:42'!unmap: aRecord using: aDataBaseSession	| unMappedObject |	unMappedObject := mappedClass basicNew.	self unmapIdOf: aRecord into: unMappedObject.	self unmap: aRecord into: unMappedObject using: aDataBaseSession.	^ unMappedObject! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping mapOneToManyRelationshipsOf: anObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapIdOf: anObject into: record using: aDataBaseSession	| newId |	newId := aDataBaseSession newIdFor: anObject.	anObject instVarNamed: #id put: newId.	record at: #id put: newId! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmapIdOf: aRecord into: unMappedObject	unMappedObject instVarNamed: #id put: (aRecord at: #id)! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapEmbededOf: anObject into: record	mappings do: [ :aMapping | aMapping embeded: anObject into: record ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmap: aRecord into: unMappedObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping unmap: aRecord into: unMappedObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:25'!initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings	mappedClass := aClass.	tableName := aTableName.	mappings := aCollectionOfMappings ! !!ClassMapping methodsFor: 'testing' stamp: 'HernanWilkinson 10/31/2016 23:02'!isFor: aClass	^mappedClass = aClass! !!ClassMapping methodsFor: 'table' stamp: 'HernanWilkinson 10/31/2016 23:25'!tableName		^tableName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClassMapping class	instanceVariableNames: ''!!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:44'!defaultTableNameFor: aClass		^aClass name asString! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:24'!for: aClass into: aTableName mappingAll: aCollectionOfMappings	self assertValidTableName: aTableName.	self assertHasIdInstanceVariable: aClass.	self assertValidMappings: aCollectionOfMappings for: aClass.		^self new initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:23'!withDefaultTableNameFor: aClass mappingAll: aCollectionOfMappings	^self for: aClass into: (self defaultTableNameFor: aClass) mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 21:15'!assertHasIdInstanceVariable: aClass 		(aClass hasInstVarNamed: #id) ifFalse: [ self error: ('<1s> has no id instance variable' expandMacrosWith: aClass name) ]! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 19:26'!assertValidMappings: aCollectionOfMappings for: aClass 	self toDo: 'Lo mejor seria recolectar todos los erroes de mapeo y no parar en el primero'.	aCollectionOfMappings do: [ :aMapping | aMapping assertIsValidFor: aClass ]	! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidTableName: aTableName	aTableName trimBoth isEmpty ifTrue: [ self error: 'Table name can not be empty' ]! !Object subclass: #DataBaseSession	instanceVariableNames: 'configuration tables id cache'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:35'!defineIdOf: anObject	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:41'!delay	(Delay forMilliseconds: 100) wait! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:05'!assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds	(relatedIds includes: relatedId) ifTrue: [ self signalRelationAlreadyExistBetween: anOwner and: aRelated ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!add: aRecord on: aTableName	| table existingRecord |	table := self tableNamed: aTableName.	existingRecord := table at: (self recordId: aRecord) ifAbsentPut: [ aRecord ].	existingRecord == aRecord ifFalse: [ self error: 'Duplicated primary key' ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:00'!signalRelationAlreadyExistBetween: anOwner and: aRelated 	self error: ('Relation between id <1s> of type <2s> and id <3s> of type <4s> already exist'		expandMacrosWith: (self idOf: anOwner) printString		with: anOwner class name		with: (self idOf: aRelated) printString		with: aRelated class name)! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:10'!relatedIdsOwnedBy: anOwner forType: aRelatedClass	| relatedIds table |	table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := self relatedIdOwnedBy: anOwner on: table.		^ relatedIds! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!addRelated: aRelated ownedBy: anOwner	| relatedIds relatedId |	relatedIds := self relatedIdsOwnedBy: anOwner forType: aRelated class.	relatedId := aRelated instVarNamed: #id.	self assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds.		relatedIds add: relatedId! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:27'!addToCache: anObject 	cache at: (self idOf: anObject) put: anObject ! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:06'!relatedIdOwnedBy: anOwner on: table	^ table at: (self idOf: anOwner) ifAbsentPut: [ Set new ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!beginTransaction	self assertIsOpen.	self assertNotInTransasction.		cache := WeakKeyDictionary new.	! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!commit		self assertInTransaction.		cache := nil! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertNotInTransasction		cache notNil ifTrue: [ self error: 'There is an open transaction already' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertInTransaction		cache isNil ifTrue: [ self error: 'There is no transaction currently' ]! !!DataBaseSession methodsFor: 'selecting - private' stamp: 'HernanWilkinson 11/1/2016 01:28'!addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper	| recordId aClassInstance |	recordId := self recordId: record.	aClassInstance := cache at: recordId ifAbsent: [ mapper unmap: record using: self ].	(aCondition value: aClassInstance) ifTrue: [ 		self addToCache: aClassInstance.		selected add: aClassInstance ].		^ selected! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 00:48'!tableNamed: aTableName	^ tables at: aTableName ifAbsentPut: [ Dictionary new ]! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass	| ownerClassMapper relatedClassMapper |		ownerClassMapper := self mapperFor: anOwnerClass.	relatedClassMapper := self mapperFor: aRelatedClass.		^ownerClassMapper tableName,'_', relatedClassMapper tableName asPlural.! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableFor: anOwnerClass relatedTo: aRelatedClass	| relationTableName table |	relationTableName := self relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass.	table := self tableNamed: relationTableName.		^ table! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	self assertIsOpen.		tables := nil! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	self assertIsClose.		tables := Dictionary new.	! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:36'!assertIsOpen		tables isNil ifTrue: [ self error: 'Session must be open to colaborate with it' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:37'!assertIsClose		tables isNil ifFalse: [ self error: 'Session must be close' ]! !!DataBaseSession methodsFor: 'persistance' stamp: 'HernanWilkinson 11/1/2016 01:28'!persist: anObject	| mapper |		self assertInTransaction.	self delay.		mapper := self mapperFor: anObject class.	mapper map: anObject using: self.		self addToCache: anObject ! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:15'!relatedOfType: aRelatedClass for: anOwner	| table relatedIds |		table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := table at: (self idOf: anOwner) ifAbsent: [ ^#() ].		^relatedIds collect: [ :aRelatedId | self objectIdentifiedAs: aRelatedId ofType: aRelatedClass ]		! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:14'!mapperFor: aClass	self toDo: 'se puede mejorar performanco usando un dictionary'.	^configuration		detect: [ :aClassMapper | aClassMapper isFor: aClass ] 		ifNone: [ self error: ('There is no mapper for <1s>' expandMacrosWith: aClass name) ]! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:16'!unmapRecordIdentifiedAs: anId ofType: aClass	| record table mapper |	mapper := self mapperFor: aClass.	table := self tableNamed: mapper tableName.	record := table at: id ifAbsent: [ self error: ('Object identified as <1s> does not exist' expandMacrosWith: anId printString) ].		^ mapper unmap: record using: self! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:15'!objectIdentifiedAs: anId ofType: aClass	self assertInTransaction.	self delay.		^ cache at: anId ifAbsentPut: [ self unmapRecordIdentifiedAs: anId ofType: aClass ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:26'!select: aCondition ofType: aClass	| mapper table |	self assertInTransaction.	self delay.		mapper := self mapperFor: aClass.	table := tables at: mapper tableName ifAbsent: [ ^ #() ].		^ table inject: OrderedCollection new into: [ :selected :record | self addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 10/31/2016 22:17'!selectAllOfType: aClass 		^self select: [ :anObject | true ] ofType: aClass! !!DataBaseSession methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 22:55'!initializeFor: aConfiguration	configuration := aConfiguration.	id := 0.	tables := nil.	cache := nil.! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:04'!recordId: aRecord	^aRecord at: #id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:00'!idOf: anObject	^anObject instVarNamed: #id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 10/28/2016 16:35'!newIdFor: anObject	id := id + 1.	^id! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DataBaseSession class	instanceVariableNames: ''!!DataBaseSession class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/28/2016 13:07'!for: aConfiguration	^self new initializeFor: aConfiguration! !Object subclass: #Mapping	instanceVariableNames: 'instanceVariableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!unmap: aRecord into: anObject using: aDataBaseSession	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!embeded: anObject into: aRecord	self subclassResponsibility! !!Mapping methodsFor: 'assertions' stamp: 'HernanWilkinson 11/1/2016 01:31'!assertIsValidFor: aClass 	(aClass hasInstVarNamed: instanceVariableName) ifFalse: [ 		self error: ('Invalid mapping for <1s> in class <2s>' expandMacrosWith: instanceVariableName with: aClass name) ] ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mapping class	instanceVariableNames: ''!!Mapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 01:32'!defaultFieldNameFor: anInstanceVariableName	^anInstanceVariableName asString! !!Mapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidFieldName: aFieldName	aFieldName trimBoth isEmpty ifTrue: [ self error: 'Field name can not be empty' ]! !Mapping subclass: #EmbededMapping	instanceVariableNames: 'fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:23'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession 		! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!unmap: aRecord into: anObject using: aDataBaseSession 	anObject instVarNamed: instanceVariableName put: (aRecord at: fieldName)! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!embeded: anObject into: aRecord	aRecord at: fieldName put: (anObject instVarNamed: instanceVariableName) ! !!EmbededMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:30'!initializeFor: anInstanceVariableName into: aFieldName	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmbededMapping class	instanceVariableNames: ''!!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:29'!withDefaultFieldNameFor: anInstanceVariableName	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName)! !!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:30'!for: anInstanceVariableName into: aFieldName	^self new initializeFor: anInstanceVariableName into: aFieldName ! !Mapping subclass: #OneToManyMapping	instanceVariableNames: 'relatedType fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!OneToManyMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:34'!initializeFor: anInstanceVariableName into: aFieldName ofType: aClass	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName.	relatedType := aClass ! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!unmap: aRecord into: anObject using: aDataBaseSession	| newCollection related |	related := aDataBaseSession relatedOfType: relatedType for: anObject.	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	newCollection addAllNotPersisting: related.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:35'!createRelationCollectionOn: aDataBaseSession ownedBy: anObject	^ OneToManySet on: aDataBaseSession ownedBy: anObject! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	| oldCollection newCollection |	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	oldCollection := anObject instVarNamed: instanceVariableName.		newCollection addAll: oldCollection.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:16'!embeded: anObject into: aRecord	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManyMapping class	instanceVariableNames: ''!!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:40'!for: anInstanceVariableName into: aFieldName ofType: aClass	self assertValidFieldName: aFieldName.		^self new initializeFor: anInstanceVariableName into: aFieldName ofType: aClass! !!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:32'!withDefaultFieldNameFor: anInstanceVariableName ofType: aClass	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName) ofType: aClass! !Set subclass: #OneToManySet	instanceVariableNames: 'session owner'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:03'!addAllNotPersisting: aCollection 		^aCollection do: [ :anObjectToAdd | super add: anObjectToAdd ]! !!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:11'!add: anObject	session persist: anObject.	session addRelated: anObject ownedBy: owner.		super add: anObject.! !!OneToManySet methodsFor: 'removing' stamp: 'HernanWilkinson 10/31/2016 21:35'!remove: anObject ifAbsent: anAbsentBlock	self shouldBeImplemented ! !!OneToManySet methodsFor: 'initialization' stamp: 'HernanWilkinson 11/1/2016 00:11'!initializeOn: aDataBaseSession ownedBy: anOwner		session := aDataBaseSession.	owner := anOwner ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManySet class	instanceVariableNames: ''!!OneToManySet class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:11'!on: aDataBaseSession ownedBy: anOwner		^self new initializeOn: aDataBaseSession ownedBy: anOwner ! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 1 July 2018 at 11:06:33.389359 pm'!!String methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 23:57'!asPlural		^self last = $s 		ifTrue: [ self, 'es' ]		ifFalse: [ self, 's' ]! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 1 July 2018 at 11:06:33.389754 pm'!!Object methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 19:27'!toDo: aString 	! !